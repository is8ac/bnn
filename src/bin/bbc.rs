#![feature(const_generics)]
use bitnn::bits::{b16, b32};
use bitnn::descend::Descend;

fn main() {
    let patches = vec![
        [
            b16(0b_1101_1100_1100_1110u16),
            b16(0b_0111_1110_1101_0010u16),
        ],
        [
            b16(0b_1001_0010_0011_0001u16),
            b16(0b_1100_0011_0101_0001u16),
        ],
        [
            b16(0b_0010_0011_0011_1001u16),
            b16(0b_0000_0001_0011_1110u16),
        ],
        [
            b16(0b_1111_1100_1010_1101u16),
            b16(0b_0111_1001_0011_0100u16),
        ],
    ];
    let examples: Vec<(Vec<usize>, usize)> = vec![
        (vec![5, 0, 1, 0], 0),
        (vec![0, 5, 1, 0], 1),
        (vec![0, 1, 4, 1], 2),
        (vec![5, 0, 0, 1], 0),
        (vec![0, 2, 1, 3], 1),
        (vec![1, 1, 4, 0], 2),
        (vec![4, 1, 1, 0], 0),
        (vec![0, 4, 1, 1], 1),
        (vec![1, 0, 4, 1], 2),
        (vec![4, 0, 1, 0], 0),
        (vec![1, 4, 1, 0], 1),
        (vec![0, 1, 4, 1], 2),
        (vec![4, 0, 1, 1], 0),
        (vec![0, 1, 0, 5], 1),
        (vec![1, 1, 4, 0], 2),
        (vec![4, 1, 1, 0], 0),
        (vec![0, 4, 1, 1], 1),
        (vec![1, 0, 4, 1], 2),
    ];

    let weights =
        <() as Descend<[b16; 2], [b32; 4], [(); 3]>>::descend(&patches, &examples, 2, 20, 100, 0);
}
